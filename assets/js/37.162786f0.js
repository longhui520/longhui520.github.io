(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{383:function(e,r,s){"use strict";s.r(r);var t=s(42),a=Object(t.a)({},(function(){var e=this,r=e.$createElement,s=e._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"rxjs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rxjs"}},[e._v("#")]),e._v(" RxJS")]),e._v(" "),s("p",[e._v("RxJS 是一个通过使用observable 序列来编写异步和基于事件的程序")]),e._v(" "),s("h2",{attrs:{id:"核心概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[e._v("#")]),e._v(" 核心概念")]),e._v(" "),s("ul",[s("li",[e._v("Observable(可观察对象):可调用的未来值或事件的集合")]),e._v(" "),s("li",[e._v("Observer(观察者)：监听了Observable提供的值的回调函数集合")]),e._v(" "),s("li",[e._v("Subscription(订阅): 建立或取消对Observable提供的值的回调函数的方法")]),e._v(" "),s("li",[e._v("Operators(操作符): 对Observable中的数据的处理方法")]),e._v(" "),s("li",[e._v("Subject(主体):将多个Observable推送给多个Observer的对象")]),e._v(" "),s("li",[e._v("Schedules(调度器):用来控制并发并且是中央集权的调度员，允许我们在发生计算时进行协调")])]),e._v(" "),s("h3",{attrs:{id:"observable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#observable"}},[e._v("#")]),e._v(" Observable")]),e._v(" "),s("p",[e._v("惰性的多个值集合")])])}),[],!1,null,null,null);r.default=a.exports}}]);